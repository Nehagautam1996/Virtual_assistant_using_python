from typing_extensions import Self
import pyttsx3
import speech_recognition as sr
import webbrowser  
import datetime  
import wikipedia 
# Method for taking the commands and recognizing command from speech_Recognition module we will use recongizer method for commands
def takeCommand():
    r = sr.Recognizer()
  
    #from speech_Recognition module we will use the Microphone module for listening the command
    with sr.Microphone() as source:
        print('Listening')
          
        # seconds of non-speaking audio before a phrase is considered complete
        r.pause_threshold = 0.5
        audio = r.listen(source)
          
        #use exception handling method so that if sound is recognized 
       
        try:
            print("Recognizing")
            Query = r.recognize_google(audio, language='en-in')
            print("the command is printed=", Query)
              
        except Exception as e:
            print(e)
            print("Please Say that again ")
            return "None"
          
        return Query
  
def speak(audio):
      
    engine = pyttsx3.init()
    # getter method to get the current value of engine property)
    voices = engine.getProperty('voices')
      
    # setter method for assistant's voice [0]=male voice and [1]=female voice 
    engine.setProperty('voice', voices[0].id)
      
    # Method for the speaking of the the assistant
    engine.say(audio)  
      
    # Blocks while processing all the currently queued commands
    engine.runAndWait()
  
def tellDay():
      
    # day of the week
    day = datetime.datetime.today().weekday() + 1
      
    #that will help us in telling the day
    Day_dict = {1: 'Monday', 2: 'Tuesday', 
                3: 'Wednesday', 4: 'Thursday', 
                5: 'Friday', 6: 'Saturday',
                7: 'Sunday'}
      
    if day in Day_dict.keys():
        day_of_the_week = Day_dict[day]
        print(day_of_the_week)
        speak("The day is " + day_of_the_week)
  
  
def tellTime():
      
    # Gives the time
    time = str(datetime.datetime.now())
      
    # time will be displayed
    print(time)
    hour = time[11:13]
    min = time[14:16]
    speak("The time is " + hour + "Hours and" + min + "Minutes")    
  
def Hello():
      
    # when the assistant is called it will greet then take query
    speak("hello  I am your desktop assistant  Tell me how may I help you")
  
def Take_query():
  
    # calling the Hello function for making assistant more interactive
    Hello()
      
    #loop is infinite to take all queries from user.terminates with bye condition given as below
    while(True):
          
        # make input query into lower case so that most of the queries match to get the perfect output
        query = takeCommand().lower()
                
        if "google" in query:
            speak("Opening Google ")
            webbrowser.open("www.google.com")
            continue
              
        elif "today" in query:
            tellDay()
            continue
          
        elif "time" in query:
            tellTime()
            continue
          
        # To exit and terminate the program
        elif "bye" in query:
            speak("Bye. Have a good day")
            exit()
          
        elif "wikipedia" in query:
              
            # if any one wants to have a information from wikipedia
            speak("Checking the wikipedia ")
            query = query.replace("wikipedia", "")
              
            # it will give the summary of 5 lines from wikipedia
            result = wikipedia.summary(query, sentences=5)
            speak("According to wikipedia")
            speak(result)
          
        elif "your name" in query:
            speak("I am SAM. Your deskstop Assistant")
  
if __name__ == '__main__':
      
    # main method for executing our functions
    Take_query()